Testing must go on
6.12.2016

fmi@golang.bg
http://fmi.golang.bg/
@fmi_golang

* В този епизод:

- Документация
- Тестването продължава


* Документиране на кода

`go` генерира автоматична документация на нашия код, вземайки под внимание:

- всеки коментар, в началото на файл

.code code/errors_and_testing/testing.go /\/\*/,/package fibonacci/

- всеки коментар, дефиниран над функция, метод, тип

.code code/errors_and_testing/testing.go /Fastest Fibonacci/,/func Fibonacci/

- всеки коментар до име в тип, var, const

.code code/errors_and_testing/testing.go /lookupTable stores/,/var lookupTable/


* Виждане на документацията

На всички локално инсталирани пакети

    godoc -http=:6060

Документация на (почти) всички go пакети качени в BitBucket, GitHub, Launchpad и Google Project Hosting

.link http://godoc.org/    godoc.org

* Testing must go on


* Benchmark тестове

- Дефинират се като функции, които приемат указател към `testing.B`
- Функциите трябва да започват с `Benchmark` и слеващата буква да е главна
- Тя се състои от `for` цикъл, извикващ `b.N` пъти тестваната функция
- `go` е достатъчно умен да реши колко пъти да я извика, за да получи адекватни резултати
- Стъпките са 1, 100, 10,000, 1,000,000 50,000,000.

.link https://github.com/ChristianSiegert/go-testing-example

.code code/errors_and_testing/testing.go /func Bench/,/END BENCH/

* Demo

* Сечението на testing.B и testing.T

- често се налага да има общ код между тестове и бенчмаркове
- с цел да не се повтаряме има testing.TB
- това е общия интерфейс между testing.B и Testing.T
- включва всичките вариации на Error, Fail, Fatal, Log и Skip

.code code/errors_and_testing/table_test.go /func testingFunc/,/END testingFunc OMIT/


* Таблично базирани тестове

- Често се налага да тестсваме един и същи сценариѝ с различни параметри
.code code/errors_and_testing/table_test.go /func TestFibonacci/,/TABLE TEST OMIT/
- От 1.7 има и подтестове които позволяват това да изглежда малко по добре в терминал

* SubTests

.code code/errors_and_testing/table_test.go /func TestSubFibonacci/,/SUB TEST OMIT/

* SubTests continues

    --- FAIL: TestFibonacci (0.00s)
            table_test.go:68: Expected 1 for Fiboncci(2) but got 21
    --- FAIL: TestSubFibonacci (0.00s)
        --- FAIL: TestSubFibonacci/Fibonacci(2) (0.00s)
            table_test.go:68: Expected 1 for Fiboncci(2) but got 21
        --- FAIL: TestSubFibonacci/Fibonacci(10) (0.00s)
            table_test.go:68: Expected 55 for Fiboncci(10) but got 21
    FAIL

- Важно е да се отбележи че подтестовете са независими един от друг. Дори един да се провали, другите ще се изпълнят
- Тъй като са именувани, то не се налага да идентифицираме в кой случай се е случила грешката

* SubBenchmarks

- В случая на Benchmark-овете това е дори още по полезно
- Понеже Benchmark-овете се измерват от началото на Benchmark функцията до нейното завършване, правенето на таблични Benchmark-ове е невъзможно
- Но в 1.7 можем да ползвам под Benchmark-ове

.code code/errors_and_testing/table_test.go /func BenchmarkSubFibonacci/,/SUB BENCHMARK OMIT/


* SubBenchmarks output:

    --- FAIL: BenchmarkSubFibonacci/BFibonacci(2)
            table_test.go:68: Expected 1 for Fiboncci(2) but got 21
    BenchmarkSubFibonacci/BFibonacci(8)-16          1000000000               2.65 ns/op
    --- FAIL: BenchmarkSubFibonacci/BFibonacci(10)
            table_test.go:68: Expected 55 for Fiboncci(10) but got 21
    --- FAIL: BenchmarkSubFibonacci
    FAIL

* All together

- Под тестовете разбира се може да бъдат рънвани паралелно или не
- Може да има под тестове на под тестовете и т.н.
.code code/errors_and_testing/table_test.go /func TestGroupSubFibonacci/,/SUB GROUP OMIT/

* All together output

    --- FAIL: TestGroupSubFibonacci (1.00s)
        --- FAIL: TestGroupSubFibonacci/group1 (0.00s)
            --- FAIL: TestGroupSubFibonacci/group1/NonParallel (0.00s)
                    table_test.go:96: Just cause
            table_test.go:98: Oops
            --- FAIL: TestGroupSubFibonacci/group1/Fibonacci(2) (1.00s)
                    table_test.go:69: Expected 1 for Fiboncci(2) but got 21
            --- FAIL: TestGroupSubFibonacci/group1/Fibonacci(10) (1.00s)
                    table_test.go:69: Expected 55 for Fiboncci(10) but got 21
    FAIL

* Example тестове - шантавата част

- Документация и тест в едно вътре в тестов файл
- Функцията започва с `Example`, последвана от името на типа или функцията
	Foo -> ExampleFoo
- За метод `Bar` го слагаме с подчертавка след типа `ExampleFoo_Bar`
- Пишем няколко реда, в които използваме нашия тип
- Можем да завършим с коментар започващ с `Output:` и ще бъде тествано че изхода на кода съвпада с останалата част от коментара
- Влиза в документацията на пакета като пример

.code code/errors_and_testing/testing.go /func Example/,/END EXAMPLE/

* Имитации

* Иматации или Mock-ове

- Често се случва да искаме да тестваме код който си говори с друг код или тотално отделна система
- Примерно paypal
- Искаме да сме сигурно че работим правилно с api-то на Paypal във всичките случаи които имаме
- Но не искаме да плащаме на paypal пари всеки път като си пуснем тестовете
- Също важи и когато не искаме да ни фейлват тестовете за една част от кода само защото ползва друга която в момента е бъгава
- Тогава правим имитации или Mock-ове - код, който подръжава на друг но без да ни изпрезва кредитните карти

* В Go

- Ако искам да можем да mock-нем нещо в тестовете си ще е необходимо да можем да го подменим в тях
- За разлика от някои други по динамични езици в които може да подменим time.Sleep или os.Read с наши имплементации, Go трябва да сме малко по имплицитни
- Обикновенно трябва да се приемат интерфейс(и) които имплементират функционалността която искаме примерно Sleeper

    type Sleeper interface {
       Sleep(time.Duration)
    }

- След което просто се подава нашата mock-ната имплементация

* Библиотеки за имитации

- Някои библиотеки ви дават "по - лесен" начин
- Препоръчваме да се обръщате към тях чак когато наистина ви потрябват
- На нас до сега не са ни трябвали
- Въпреки това ще ги спомнем

* testify

.link https://github.com/stretchr/testify
- Цяла библиотека за писане на тестове
- Но има `mock` пакет

* mockery

.link https://github.com/vektra/mockery
- Библиотека занимаваща се специално с... mockery

* mock

.link https://github.com/golang/mock
- Както забелязвате, в github организацията на golang е
- Подсказва някаква връзка с авторите на езика
- Често от подобни места пакети стигат до стандартната библиотека

* Стига думи с "mock"!

* Пример от домашно 2

* В следващият епизод

- Web програмиране в Go
- HTTP
- UDP
- TCP
