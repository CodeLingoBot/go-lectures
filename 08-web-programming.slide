Web програмиране
20.02.2017

fmi@golang.bg
http://fmi.golang.bg/

* TCP/IP

- Коректната имплементация на TCP/IP stack е трудна задача
- Но за щастие в Go имаме `net`
- Всичката сложност се свежда до

.play code/web-programming/net-example.go

* net е ваш приятел

- Съдържа функции и типове, удобни за работа с всички популярни network протоколи
- Освен простият интерфейс, дава и достъп до най - ниско ниво

* net.Conn

- Интерфейс, представляващ една "връзка"
- Всяка връзка ще бъде представена и управлявана чрез обект имплементиращ този интерфейс
- Има методи като Read, Write, Close и други
- Интересни са SetDeadline, SetReadDeadline, SetWriteDeadline
- Всякакъв вид "връзка" - TCP, UDP, Unix

Имплементации:

- net.IPConn
- net.TCPConn
- net.UDPConn
- net.UnixConn


* net.Dial

	func Dial(network, address string) (Conn, error)

- Създава нова и връща обект от тип `net.Conn`
- Ориентира се от `network` аргумента и връща правилният тип Conn
- Има и методи DialIP, DialTCP и т.н.

* net.Addr

- Интерфейс, представляващ адрес в мрежата
- Подобно на net.Conn, има имплементации за всякакви протоколи

* net.Listen()

- Начин да се правят сървъри
- Bind-ва се на някакъв адрес
- Връща `net.Listener` (интерфейс)
- На който можете да казват `Accept`
- И ще получавате `net.Conn` за всяка връзка към сървъра ви

* Пример

	ln, err := net.Listen("tcp", ":8080")
	if err != nil {
		// handle error
	}
	for {
		conn, err := ln.Accept()
		if err != nil {
			// handle error
		}
		go handleConnection(conn)
	}

* HTTP

* Протокола

- Client-Server
- Stateless
- Използва се за много повече неща от колкото някой е очаквал
- Справя се брилянтно
- ... имайки предвид, че никой не е очаквал


* Версии

- Коя точно ползваме?
- RFC1945 (1995-6) - 1.0
- RFC2616 (1999) - 1.1
- RFC7230 до RFC7237 (2014) - 1.1 (пак!?)
- RFC7540 (2015) - 2.0


* Всичките? Едновременно?

- Да
- За щастие са backward compatible (до 2.0)
- Това интересува ли ни? В Go - рядко.


* В Go си имаме библиотека

- Познахте - `net/http`
- Може да се ползва за HTTP клиент
- Както и да си направите сървър
- Крие от вас различните версии
- Може да си се занимавате с тях ако искате
- Лесно и почти прозрачно поддържа и HTTPS заявки и сървъри
- От версия 1.6 вече си имаме вградена поддръжка за HTTP 2.0
- И преди това имаше, просто беше тук [[https://golang.org/x/net/http2]]
- От версия 1.8 има и HTTP 2.0 server push

* Защо!?

- Езика има имплементация на някакъв си протокол в стандартната библиотека?
- Защо не е third-party?
- HTTP е толкова проникнал в света ни, че всеки уважаващ се език трябва да се справя с него добре

* Клиентска част

.play code/web-programming/http-client.go /^import/,/^}/

- Не е интересно, всички вероятно сте го правили
- С помощта на `http.Request` и `http.Client` може да се правят и по-сложни заявки

* http.Request

	type Request struct {
		// Method specifies the HTTP method (GET, POST, PUT, etc.).
		Method string

		// URL specifies either the URI being requested or the URL to access.
		URL *url.URL

		// A header maps request lines to their values.
		Header Header

		// И доста други полета, за някои от които ще разкажем след малко...
	}

- Представя HTTP request, който може или да бъде изпратен от клиент (http.Client), или да бъде получен от сървър
- Някои от [[https://golang.org/pkg/net/http/#Request][полетата му]] имат различно значение в двата случая
- Всичко, което знаете за заявката, е записано в такава структура

* http.Client

- Използва се за правене на HTTP заявки
- Има методи `Get`, `Head`, `Post` и `PostForm` за улеснение
- Има универсален метод за всякакви HTTP заявки:

 	Do(req *Request) (resp *Response, err error)

Чрез атрибутите на `http.Client` имате възможност да определите:

- Kакъв `Transport` ще се използва (пр. да зададете proxy)
- Timeouts
- Cookies
- Дали да се следват HTTP redirects

* http.Response

- Връща се при всички клиентски заявки
- Съдържа полета като `Status`, `Header`, `Body` и др.
- http.Get(req) връща след прочитането на хедърите

Тялото на отговора може да се чете от `Body` (`io.ReadCloser`):

- трябва да се затваря, за да не оставя отворен connection
- трябва и да се изчита докрай, за да може да се преизползва връзката
- което се случва автоматично и напълно прозрачно за нас във всички други отношения

* Интересна част

.play code/web-programming/http-server.go /func main/,/^}/

* Получаване на клиентски заявки

- `http.Request` се използва и за получаването на клиентски заявки
- Лесно се обработват всякакви параметри и данни от форми:

	err := req.ParseForm()
	// handle if err != nil
	sortOrder := req.Form.Get("sortby")

Повече от един начин да одереш котка:

- `Request.Form` от тип `url.Values`
- `Request.PostForm` от тип `url.Values`
- `Request.Body` от тип `io.ReadCloser`
- `Request.MultipartForm` от тип `*multipart.Form`, след извикване на `ParseMultipartForm()`

* http.ResponseWriter

	type ResponseWriter interface {
		// Header returns the header map that will be sent by WriteHeader.
		Header() Header

		// Write writes the data to the connection as part of an HTTP reply.
		Write([]byte) (int, error)

		// WriteHeader sends an HTTP response header with status code.
		WriteHeader(int)
	}

- В такова нещо пишете отговора на HTTP заявка
- Забележете, че всяка негова имплементация ще имплементира и `io.Writer` интерфейса

Това ни позволява да си използваме неща като:

  fmt.Fprintf(rw, "Нещо си")

за да отговаряме на HTTP заявки...

* http.Handler

	type Handler interface {
		ServeHTTP(ResponseWriter, *Request)
	}

- Основния градивен блок на всеки уеб сървър
- Може да се викат един в друг като всеки може да променя ResponseWriter-а и Request-а
- ... или да подава различни на следващия, или да не вика следващ изобщо
- За улеснение имаме и тип `http.HandlerFunc`, за който горният интерфейс е имплементиран:
	type HandlerFunc func(ResponseWriter, *Request)
- Всъщност последния аргумент в ListenAndServe е първия Handler за всяка заявка
- Ако той е nil то се използва DefaultServeMux...


* Mux - що е то?

- Мултиплексър на заявки или по-скоро разпределител
- По някакво правило разпределя заявки на краен брой други хендлъри
- `http.HandleFunc` добавя ново правило в `http.DefaultServeMux`
- `http.ServeMux` е проста имплементация, която само match-ва пътя на заявката
- ... ако нищо не съвпадне се извиква `http.NotFoundHandler`

* Стандартни Handler-и

- `NotFoundHandler` - връща 404 и съобщение
- `TimeoutHandler` - приема друг хендлър и лимитира времето за отговор
- `FileServer` - лесен файлов сървър
- `RedirectHandler`
- `StripPrefix` - премахва част от пътя преди да предаде заявка на подаден хендлър
- `ServeMux` също е handler


* Пример

.play code/web-programming/handlers-mux.go /func main/,/^}/


* ResponseWriter допълнения

`ResponseWriter` е базов интерфейс, но в някои ситуации ви се налага да имате повече контрол:

	type CloseNotifier interface {
		// CloseNotify returns a channel that receives a single value
		// when the client connection has gone away.
		CloseNotify() <-chan bool
	}

	type Hijacker interface {
		// Hijack lets the caller take over the connection.
		// After a call to Hijack(), the HTTP server library
		// will not do anything else with the connection.
		Hijack() (net.Conn, *bufio.ReadWriter, error)
	}

	type Pusher interface {
	    // Push initiates an HTTP/2 server push. [...]
	    Push(target string, opts *PushOptions) error
	}

* http.RoundTripper и http.Transport

`http.RoundTripper` е абстракцията за изпълнение на единична HTTP request-response транзакция:

	type RoundTripper interface {
		RoundTrip(*Request) (*Response, error)
	}

`http.Transport` е имплементация на `http.RoundTripper`, която поддръжа HTTP, HTTPS и проксита. По подразбиране в `http` пакета имаме:

	var DefaultTransport RoundTripper = &Transport{
		Proxy: ProxyFromEnvironment,
		Dial: (&net.Dialer{
			Timeout:   30 * time.Second,
			KeepAlive: 30 * time.Second,
		}).Dial,
		TLSHandshakeTimeout: 10 * time.Second,
	}

* Разширяване и тестване

- Всички по-важни HTTP компоненти са под формата на интерфейси
- Може да използвате вградените им имплементации или да си напишете ваши
- Има и помощни пакети `httputil` и `httptest` с благинки
- В `httptest` има вградени `ResponseRecorder` и `Server` имплементации за брутално лесни HTTP end-to-end тестове



* http.Pusher (in 1.8)

- Вече във версия 1.8
- Позволява на сървъра да прати ресурс към бразъра преди още да е бил поискан

	http.Handle("/index.html", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// server push is available if w implements http.Pusher
		if p, ok := w.(http.Pusher); ok {
			p.Push("/static/gopher.png", nil}
		}
		// load the main page
		w.Header().Set("Content-Type", "text/html")
		w.Write([]byte(`<img src="/static/gopher.png" />`))
	}))


* Темплейти

- Не искаме да смесваме бизнес логиката с представянето на данните
- Искаме визуализацията да е на друго място и просто да получава информация какво да покаже
- text/template
- Говорейки за "визуализация" в браузър имаме предвид HTML
- html/template


* Пример

Темплейт:

	<h1>Editing {{.Title}}</h1>

	<form action="/save/{{.Title}}" method="POST">
	<div><textarea name="body" rows="20" cols="80">{{printf "%s" .Body}}</textarea></div>
	<div><input type="submit" value="Save"></div>
	</form>


Изполването му:

	func editHandler(w http.ResponseWriter, r *http.Request) {
		p := &Page{
			Title: "Hello, world!",
			Body: "Lorem ipsum dolor sit amet...",
		}
		t, _ := template.ParseFiles("edit.html")
		t.Execute(w, p)
	}


* text/template vs html/template

`text/template`

	import "text/template"
	...
	t, err := template.New("foo").Parse(`{{define "T"}}Hello, {{.}}!{{end}}`)
	err = t.ExecuteTemplate(out, "T", "<script>alert('you have been pwned')</script>")



	Hello, <script>alert('you have been pwned')</script>!

`html/template`

	import "html/template"
	...
	t, err := template.New("foo").Parse(`{{define "T"}}Hello, {{.}}!{{end}}`)
	err = t.ExecuteTemplate(out, "T", "<script>alert('you have been pwned')</script>")



	Hello, &lt;script&gt;alert(&#39;you have been pwned&#39;)&lt;/script&gt;!


* Сигурност и escaping

- Както се вижда, `html/template` се грижи всичко да е правилно escape-нато
- За `O'Reilly: How are <i>you</i>?` ще направи:

	Context                          {{.}} After
	{{.}}                            O'Reilly: How are &lt;i&gt;you&lt;/i&gt;?
	<a title='{{.}}'>                O&#39;Reilly: How are you?
	<a href="/{{.}}">                O&#39;Reilly: How are %3ci%3eyou%3c/i%3e?
	<a href="?q={{.}}">              O&#39;Reilly%3a%20How%20are%3ci%3e...%3f
	<a onx='f("{{.}}")'>             O\x27Reilly: How are \x3ci\x3eyou...?
	<a onx='f({{.}})'>               "O\x27Reilly: How are \x3ci\x3eyou...?"
	<a onx='pattern = /{{.}}/;'>     O\x27Reilly: How are \x3ci\x3eyou...\x3f


* Gorilla

Няколко библиотеки, които ще улеснят живота ви по темата

- gorilla/context
- gorilla/mux
- gorilla/reverse
- gorilla/rpc
- gorilla/schema
- gorilla/securecookie
- gorilla/sessions
- gorilla/websocket

.link http://www.gorillatoolkit.org/


* context

- Нещо сравнително ново в стандартната билбиотека
- Преди живееше в `golang.org/x/net/context`
- Позволява споделянето на общ контекст за заявка между различни "части на един сървър"

* Защо ни е context?

- Често една заявка се обработва от много go рутини
- Чрез context може да се имплементира глобален Timeout на заявка
- Общо хранилище за стойности
- Позволява преждевременно спиране на работата

* Как се ползва?

- Всеки контекст е "наследник" на друг
- От "root" контекста се създава нов за всяка заявка или дори под-операция
- Този контекст се предава като аргумент на всички handler-и и функции, занимаващи се със заявката

* Пример

.link https://blog.golang.org/context
- Може би малко остарял т.к. `context` от стандартната библиотека е малко различен
- Идеята е същата, само API-то е леко променено
